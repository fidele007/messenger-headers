/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 3, 2016 at 12:32:01 PM Central European Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/51214F70-E877-4284-9DAC-5D8552407255/Messenger.app/Messenger
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Messenger/MNSecureMessagingCryptoStateLoading.h>

@protocol MNSecureMessagingMasterKeyProviding, MNSecureMessagingCryptoStateLoaderListening, OS_dispatch_queue, FBClock;
@class MNSecureMessagingCryptoKeychainStore, MNSecureMessagingRegistrationStateStore, MNSecureMessagingStore, MNSecureMessagingSessionCryptoStateStore, MNSecureMessagingStateDeleter, NSObject, NSString;

@interface MNSecureMessagingCryptoStateLoader : NSObject <MNSecureMessagingCryptoStateLoading> {

	MNSecureMessagingCryptoKeychainStore* _keychainStore;
	MNSecureMessagingRegistrationStateStore* _registrationStore;
	MNSecureMessagingStore* _messagingStore;
	MNSecureMessagingSessionCryptoStateStore* _cryptoStateStore;
	id<MNSecureMessagingMasterKeyProviding> _storageMasterKeyProvider;
	MNSecureMessagingStateDeleter* _existingStateDeleter;
	id<MNSecureMessagingCryptoStateLoaderListening> _listener;
	NSObject*<OS_dispatch_queue> _queue;
	id<FBClock> _clock;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)_openCryptoStateStoreShouldRetry:(BOOL)arg1 ;
-(void)_loadKeychainState;
-(void)_handleKeychainStateAvailable:(id)arg1 ;
-(void)_handleRegistrationWhenKeychainNotAvailable;
-(void)_handleShouldCreateCryptoStateWithReason:(long long)arg1 ;
-(void)_handleShouldStartRegistrationFlowWithReason:(long long)arg1 currentRegistrationState:(id)arg2 currentCryptoState:(id)arg3 ;
-(void)_loadStorageKeyAndOpenStoreWithKeychainState:(id)arg1 andRegistrationState:(id)arg2 ;
-(void)_openStoresWithKeychainState:(id)arg1 andRegistrationState:(id)arg2 masterKey:(id)arg3 shouldRetry:(BOOL)arg4 ;
-(void)_handleCouldNotOpenBecauseStoreClosed;
-(void)tryLoadState;
-(void)unloadState;
-(id)initWithWithKeychainStore:(id)arg1 registrationStore:(id)arg2 messagingStore:(id)arg3 cryptoStateStore:(id)arg4 storageMasterKeyProvider:(id)arg5 existingStateDeleter:(id)arg6 listener:(id)arg7 clock:(id)arg8 queue:(id)arg9 ;
@end

