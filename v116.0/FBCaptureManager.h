/*
* This header is generated by classdump-dyld 1.0
* on Monday, May 8, 2017 at 12:27:58 AM Central European Summer Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/0B364788-EFE9-4CC1-B4D1-033CC2D7E2B9/Messenger.app/Messenger
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Messenger/Messenger-Structs.h>
#import <Messenger/FBCameraAnalyticsPayloadProvider.h>
#import <libobjc.A.dylib/AVCaptureVideoDataOutputSampleBufferDelegate.h>
#import <Messenger/FBAudioBufferHandler.h>
#import <Messenger/FBCaptureSessionStateDelegate.h>
#import <Messenger/FBCaptureSessionRuntimeErrorDelegate.h>
#import <Messenger/FBCaptureLowLightDetectorDelegate.h>
#import <Messenger/FBMPInput.h>
#import <Messenger/FBCaptureSessionController.h>
#import <Messenger/FBCaptureCameraController.h>
#import <Messenger/FBCaptureEventAnnouncer.h>
#import <Messenger/FBCapturePerformanceTrackerController.h>

@protocol OS_dispatch_queue, FBCaptureOutput, FBOrientationTracking, FBMPProducerPort, FBCaptureManagerFrameDropDelegate;
@class NSArray, FBCaptureManagerListenerAnnouncer, NSObject, FBCaptureEventListenerAnnouncer, AVCaptureAudioDataOutput, AVCaptureDeviceInput, FBAudioCapturer, FBCaptureSession, FBMPPreview, AVCaptureVideoDataOutput, NSURL, FBMPVideoRecorder, FBVideoProcessor, AVCaptureDevice, FBCaptureDevice, FBCaptureManagerFeatureConfiguration, FBCaptureLowLightDetector, NSString, NSDictionary, FBCameraProductionDebugLogger, FBFramePerformanceTracker, FBCameraStartReliabilityLogger, FBCameraActionPerformanceLogger;

@interface FBCaptureManager : NSObject <FBCameraAnalyticsPayloadProvider, AVCaptureVideoDataOutputSampleBufferDelegate, FBAudioBufferHandler, FBCaptureSessionStateDelegate, FBCaptureSessionRuntimeErrorDelegate, FBCaptureLowLightDetectorDelegate, FBMPInput, FBCaptureSessionController, FBCaptureCameraController, FBCaptureEventAnnouncer, FBCapturePerformanceTrackerController> {

	FBCaptureManagerListenerAnnouncer* _announcer;
	NSObject*<OS_dispatch_queue> _listenerQueue;
	FBCaptureEventListenerAnnouncer* _captureEventAnnouncer;
	NSObject*<OS_dispatch_queue> _captureEventAnnounceQueue;
	NSObject*<OS_dispatch_queue> _audioBufferQueue;
	AVCaptureAudioDataOutput* _audioDataOutput;
	AVCaptureDeviceInput* _audioDeviceInput;
	FBAudioCapturer* _audioCapturer;
	FBCaptureSession* _captureSession;
	FBMPPreview* _capturePreview;
	NSObject*<OS_dispatch_queue> _sessionQueue;
	unsigned long long _state;
	id<FBCaptureOutput> _photoCaptureOutput;
	NSObject*<OS_dispatch_queue> _videoBufferQueue;
	NSObject*<OS_dispatch_queue> _videoDataOutputQueue;
	AVCaptureVideoDataOutput* _videoDataOutput;
	NSURL* _directoryPathForVideoStorage;
	AVCaptureDeviceInput* _videoDeviceInput;
	FBMPVideoRecorder* _videoRecorder;
	id<FBOrientationTracking> _orientationTracker;
	FBVideoProcessor* _videoProcessor;
	AVCaptureDevice* _currentDevice;
	FBCaptureDevice* _fbCurrentDevice;
	FBCameraConfiguration _configuration;
	FBCaptureManagerFeatureConfiguration* _featureConfiguration;
	FBCaptureLowLightDetector* _lowLightDetector;
	NSString* _normalLightPreset;
	long long _designatedCameraDeviceFPS;
	BOOL _usedAsMediaPipelineInput;
	BOOL _bufferOrientationDetectionEnabled;
	NSDictionary* _analyticsAnnotations;
	FBCameraAnalyticsPayload _analyticsPayload;
	mutex _analyticsPayloadLock;
	BOOL _isCaptureSessionFinishedLoading;
	int _waitingForFirstFrame;
	FBCameraProductionDebugLogger* _debugLogger;
	FBFramePerformanceTracker* _framePerformanceTracker;
	FBCameraStartReliabilityLogger* _startReliabilityLogger;
	NSObject*<OS_dispatch_queue> _loggerQueue;
	FBCameraActionPerformanceLogger* _cameraActionPerformanceLogger;
	unsigned long long _videoDataCounter;
	unsigned long long _audioDataCounter;
	long long _targetVideoRecordingOrientation;
	id<FBMPProducerPort> _videoProducerPort;
	id<FBMPProducerPort> _audioProducerPort;
	id<FBCaptureManagerFrameDropDelegate> _frameDropDelegate;
	OpaqueCMClockRef _audioSessionClock;
	OpaqueCMClockRef _videoSessionClock;
	/*^block*/id _audioLevelCallback;
	long long _currentVideoOrientation;

}

@property (assign) long long currentVideoOrientation;                                                     //@synthesize currentVideoOrientation=_currentVideoOrientation - In the implementation block
@property (nonatomic,readonly) double maxZoomFactor; 
@property (nonatomic,readonly) UIView*<FBMPOutput> capturePreview; 
@property (nonatomic,copy,readonly) NSString * cameraSessionID; 
@property (nonatomic,readonly) id<FBMPProducerPort> videoProducerPort;                                    //@synthesize videoProducerPort=_videoProducerPort - In the implementation block
@property (nonatomic,readonly) id<FBMPProducerPort> audioProducerPort;                                    //@synthesize audioProducerPort=_audioProducerPort - In the implementation block
@property (assign,nonatomic,__weak) id<FBCaptureManagerFrameDropDelegate> frameDropDelegate;              //@synthesize frameDropDelegate=_frameDropDelegate - In the implementation block
@property (assign,nonatomic) OpaqueCMClockRef audioSessionClock;                                          //@synthesize audioSessionClock=_audioSessionClock - In the implementation block
@property (assign,nonatomic) OpaqueCMClockRef videoSessionClock;                                          //@synthesize videoSessionClock=_videoSessionClock - In the implementation block
@property (nonatomic,copy) id audioLevelCallback;                                                         //@synthesize audioLevelCallback=_audioLevelCallback - In the implementation block
@property (getter=isAudioSessionRunning,nonatomic,readonly) BOOL audioSessionRunning; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,copy,readonly) NSArray * producerPorts; 
-(void)addCaptureManagerListener:(id)arg1 ;
-(void)captureImageWithCompletion:(/*^block*/id)arg1 callbackQueue:(id)arg2 ;
-(void)performCameraAction:(id)arg1 ;
-(UIView*<FBMPOutput>)capturePreview;
-(id)initWithDirectoryPathForVideoStorage:(id)arg1 orientationTracker:(id)arg2 configuration:(FBCameraConfiguration)arg3 listenerQueue:(id)arg4 cameraAnalyticsType:(id)arg5 captureSession:(id)arg6 framePerformanceTracker:(id)arg7 featureConfiguration:(id)arg8 ;
-(void)startAudioSessionWithCompletion:(/*^block*/id)arg1 ;
-(id)framePerformanceResultDisplayer;
-(BOOL)doesCurrentDeviceSupportSessionPreset:(id)arg1 ;
-(void)prepareRecording;
-(void)cancelRecordingIfAny;
-(void)stopRecordingWithCompletion:(/*^block*/id)arg1 callbackQueue:(id)arg2 ;
-(double)maxZoomFactor;
-(void)captureImageInHighResolution:(BOOL)arg1 completion:(/*^block*/id)arg2 callbackQueue:(id)arg3 ;
-(void)startRecordingWithStartCompletion:(/*^block*/id)arg1 segmentCompletion:(/*^block*/id)arg2 ;
-(void)startRecordingWithCompletion:(/*^block*/id)arg1 ;
-(id)lastRenderedBufferImage;
-(void)removeCaptureManagerListener:(id)arg1 ;
-(void)captureImageInHighResolution:(BOOL)arg1 completion:(/*^block*/id)arg2 callbackQueue:(id)arg3 previewSize:(CGSize)arg4 ;
-(BOOL)canZoomToZoomFactor:(double)arg1 ;
-(BOOL)doesCurrentDeviceSupportTorchMode:(long long)arg1 ;
-(NSArray *)producerPorts;
-(void)sessionWillStart:(id)arg1 ;
-(void)sessionConnectedPort:(id)arg1 context:(id)arg2 ;
-(void)sessionDisconnectedPort:(id)arg1 context:(id)arg2 ;
-(id<FBMPProducerPort>)videoProducerPort;
-(id<FBMPProducerPort>)audioProducerPort;
-(void)setUsedAsMediaPipelineInputWithBufferOrientationEnabled:(BOOL)arg1 ;
-(void)addCaptureEventListener:(id)arg1 ;
-(NSString *)cameraSessionID;
-(long long)currentVideoOrientation;
-(/*^block*/id)processImageBlock;
-(OpaqueCMClockRef)audioSessionClock;
-(OpaqueCMClockRef)videoSessionClock;
-(BOOL)supportsCaptureSessionPreset:(id)arg1 cameraPosition:(long long)arg2 ;
-(id)_videoRecorder;
-(void)sessionWillStop:(id)arg1 ;
-(void)setCurrentVideoOrientation:(long long)arg1 ;
-(void)_announce:(/*^block*/id)arg1 ;
-(void)switchToDeviceWithID:(id)arg1 loggingInfo:(const FBCameraEventLoggingInfo*)arg2 ;
-(void)setCaptureDevicePosition:(long long)arg1 loggingInfo:(const FBCameraEventLoggingInfo*)arg2 ;
-(void)setFlashMode:(long long)arg1 loggingInfo:(const FBCameraEventLoggingInfo*)arg2 ;
-(void)setScaledPoint:(CGPoint)arg1 loggingInfo:(const FBCameraEventLoggingInfo*)arg2 ;
-(void)setSessionPreset:(id)arg1 loggingInfo:(const FBCameraEventLoggingInfo*)arg2 ;
-(void)setTorchMode:(long long)arg1 loggingInfo:(const FBCameraEventLoggingInfo*)arg2 ;
-(void)setZoomFactor:(double)arg1 loggingInfo:(const FBCameraEventLoggingInfo*)arg2 ;
-(void)setFrameRate:(long long)arg1 loggingInfo:(const FBCameraEventLoggingInfo*)arg2 ;
-(void)setLowLightModeEnabled:(BOOL)arg1 loggingInfo:(const FBCameraEventLoggingInfo*)arg2 ;
-(void)setVideoOrientation:(long long)arg1 loggingInfo:(const FBCameraEventLoggingInfo*)arg2 ;
-(void)_ensureCaptureDeviceIsCreated;
-(void)_announceCaptureEvent:(/*^block*/id)arg1 ;
-(CGSize)_videoBufferSize;
-(void)_startCaptureImageWithAction:(id)arg1 ;
-(BOOL)isAudioSessionRunning;
-(void)_startNewCameraLoggingSession;
-(BOOL)_setFrameRate:(long long)arg1 ;
-(BOOL)_setLowLightMode:(BOOL)arg1 ;
-(void)_updateCurrentDeviceWithLowLightState:(BOOL)arg1 ;
-(void)_setVideoOrientation:(long long)arg1 ;
-(BOOL)_ensureState:(unsigned long long)arg1 ;
-(id)videoDataOutput;
-(void)_startAudioSessionWithCompletion:(/*^block*/id)arg1 ;
-(void)_prepareRecording;
-(void)_completeVideoCapture:(id)arg1 context:(StopRecordingContext)arg2 ;
-(void)_setCurrentCaptureDevice:(id)arg1 announceUpdates:(BOOL)arg2 ;
-(void)_updateDefaultVideoOrientationAndMirrorSettings;
-(void)_updateDeviceFrameRate;
-(long long)_trackerTargetFPS;
-(void)_setUpCaptureConnectionForVideoRecording;
-(void)_handleVideoSampleBuffer:(opaqueCMSampleBufferRef)arg1 ;
-(void)_handleVideoSampleBufferWithFiltersConsidered:(opaqueCMSampleBufferRef)arg1 ;
-(void)_handleVideoSampleBuffer:(opaqueCMSampleBufferRef)arg1 filteredBuffer:(opaqueCMSampleBufferRef)arg2 ;
-(id)photoCaptureOutput;
-(void)_completeFailedCaptureImageAction:(id)arg1 error:(id)arg2 ;
-(void)_completeCaptureImageAction:(id)arg1 bufferImage:(id)arg2 metatdata:(id)arg3 orientation:(long long)arg4 ;
-(void)_completeSuccessfulCaptureImageAction:(id)arg1 image:(id)arg2 metatdata:(id)arg3 orientation:(long long)arg4 ;
-(void)_finishVideoCaptureWithLoadedAsset:(id)arg1 context:(StopRecordingContext)arg2 ;
-(void)_handleVideoRecordFailedWithContext:(StopRecordingContext)arg1 ;
-(void)_configureInputsAndOutputs;
-(void)_configureAudioSessionInputAndOutput;
-(id)audioDataOutput;
-(void)_initializeVideoProcessor;
-(void)_startCameraSession;
-(void)_didFinishStartingCaptureSessionWithLoggingInfo:(FBCameraEventLoggingInfo)arg1 ;
-(void)_configureCaptureSession;
-(void)_updateDefaultVideoOrientation;
-(void)_updateConnectionMirrorSettings;
-(void)_detectLowLightForDevice:(id)arg1 ;
-(id)_sessionPresetWithLowLightMode:(BOOL)arg1 ;
-(void)_startCaptureSessionWithLoggingInfo:(const FBCameraEventLoggingInfo*)arg1 ;
-(void)_endSessionWithLoggingInfo:(const FBCameraEventLoggingInfo*)arg1 ;
-(void)_captureImageWithAction:(id)arg1 ;
-(void)_startRecordingWithLoggingInfo:(const FBCameraEventLoggingInfo*)arg1 ;
-(void)_stopRecordingWithContext:(StopRecordingContext)arg1 ;
-(FBCameraAnalyticsPayload)cameraAnalyticsPayload;
-(void)_lowLightModeDidChange:(long long)arg1 ;
-(void)handleAudioSampleBuffer:(opaqueCMSampleBufferRef)arg1 averagePowerLevel:(float)arg2 ;
-(void)captureSession:(id)arg1 didBecomeInterruptedWithReason:(unsigned char)arg2 ;
-(void)captureSessionDidResignInterrupted:(id)arg1 ;
-(void)captureSession:(id)arg1 didEncounterRuntimeError:(id)arg2 willRetry:(BOOL)arg3 ;
-(void)lowLightDetector:(id)arg1 didChangeToCondition:(long long)arg2 ;
-(void)removeCaptureEventListener:(id)arg1 ;
-(id<FBCaptureManagerFrameDropDelegate>)frameDropDelegate;
-(void)setFrameDropDelegate:(id<FBCaptureManagerFrameDropDelegate>)arg1 ;
-(void)setAudioSessionClock:(OpaqueCMClockRef)arg1 ;
-(void)setVideoSessionClock:(OpaqueCMClockRef)arg1 ;
-(id)audioLevelCallback;
-(void)setAudioLevelCallback:(id)arg1 ;
-(id)currentDevice;
-(void)dealloc;
-(BOOL)isRunning;
-(OpaqueCMClockRef)clock;
-(void)startSession;
-(void)stopAudioSession;
-(void)stopSession;
-(id)audioDeviceInput;
-(void)captureOutput:(id)arg1 didOutputSampleBuffer:(opaqueCMSampleBufferRef)arg2 fromConnection:(id)arg3 ;
-(void)captureOutput:(id)arg1 didDropSampleBuffer:(opaqueCMSampleBufferRef)arg2 fromConnection:(id)arg3 ;
-(void)_stopAudioSession;
@end

