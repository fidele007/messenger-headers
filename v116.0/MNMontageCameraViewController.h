/*
* This header is generated by classdump-dyld 1.0
* on Monday, May 8, 2017 at 12:27:51 AM Central European Summer Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/0B364788-EFE9-4CC1-B4D1-033CC2D7E2B9/Messenger.app/Messenger
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Messenger/Messenger-Structs.h>
#import <UIKit/UIViewController.h>
#import <Messenger/FBCaptureCoordinatorBaseGestureDelegate.h>
#import <Messenger/FBCaptureManagerListener.h>
#import <Messenger/MNMontageCameraViewDelegate.h>
#import <Messenger/MNMontageCaptureInteractionControllerDelegate.h>
#import <Messenger/MNMontagePermissionsViewDelegate.h>
#import <Messenger/FBWebRTCHandlerListener.h>
#import <Messenger/MNMessengerCodeDetectorDelegate.h>
#import <Messenger/MNMontageComposerHudCameraListener.h>

@protocol FBWebRTCHandler, MNCameraSettingsInterface, MNMediaFilterCaptureSessionPresetDeciding, MNMontageCameraConfigurating, MNMontageCameraViewControllerDelegate;
@class FBLazyCreator, MNMontageCameraTooltipAutoHideHandler, MNSoundController, FBTimer, FBUserSession, MNMountableView, FBMPTapGestureDebouncer, MNMontageCameraState, MNMontageCameraStateListenerAnnouncer, MNCameraDeviceCyclingController, MNCameraPermissionsLogger, MNCameraCapturedPhoto, MNCameraCapturedVideo, FBMessageOutgoingVideoStreamUploader, MNMessageSendSegmentStreamDoublePhaseCoordinator, FBCameraRollWriter, MNMessengerCodeManager, MNMessengerCodeDetector, NSString, MNMontageCaptureInteractionController;

@interface MNMontageCameraViewController : UIViewController <FBCaptureCoordinatorBaseGestureDelegate, FBCaptureManagerListener, MNMontageCameraViewDelegate, MNMontageCaptureInteractionControllerDelegate, MNMontagePermissionsViewDelegate, FBWebRTCHandlerListener, MNMessengerCodeDetectorDelegate, MNMontageComposerHudCameraListener> {

	FBLazyCreator* _captureCameraControllerLazyCreator;
	FBLazyCreator* _captureSessionControllerLazyCreator;
	FBLazyCreator* _performanceMonitorViewCreator;
	FBLazyCreator* _filtersManagerLazyCreator;
	FBLazyCreator* _tooltipControllerCreator;
	MNMontageCameraTooltipAutoHideHandler* _tooltipAutoHideHandler;
	BOOL _didShowTooltipInThisSession;
	MNSoundController* _soundController;
	FBTimer* _startRecordingTimer;
	FBUserSession* _userSession;
	id<FBWebRTCHandler> _webRTCHandler;
	FBLazyCreator* _XRayDetectorCreator;
	FBLazyCreator* _XRayDetectorMonitorViewCreator;
	FBLazyCreator* _cameraViewCreator;
	FBLazyCreator* _permissionsViewCreator;
	MNMountableView* _cameraOrPermissionsView;
	FBMPTapGestureDebouncer* _tapGestureDebouncer;
	MNMontageCameraState* _cameraState;
	MNMontageCameraStateListenerAnnouncer* _cameraStateAnnouncer;
	id<MNCameraSettingsInterface> _cameraSettings;
	MNCameraDeviceCyclingController* _cameraCycler;
	unsigned long long _appearanceState;
	MNCameraPermissionsLogger* _permissionsLogger;
	MNCameraCapturedPhoto* _photoCapture;
	MNCameraCapturedVideo* _videoCapture;
	FBMessageOutgoingVideoStreamUploader* _streamUploader;
	MNMessageSendSegmentStreamDoublePhaseCoordinator* _streamCoordinator;
	FBCameraRollWriter* _cameraRollWriter;
	MNMessengerCodeManager* _messengerCodeManager;
	MNMessengerCodeDetector* _messengerCodeDetector;
	long long _flashMode;
	BOOL _lowLightModeEnabled;
	double _pinchZoomFactor;
	double _panZoomFactor;
	id<MNMediaFilterCaptureSessionPresetDeciding> _mediaFilterCaptureSessionPresetDecider;
	BOOL _shouldShowLowLightModeInThisSession;
	BOOL _isCameraActive;
	BOOL _isPreviewLoaded;
	BOOL _stoppingCaptureSession;
	BOOL _waitingToFinishPlayingCaptureSoundBeforeBeginningRecording;
	BOOL _captureControllersNeedSetup;
	id<MNMontageCameraConfigurating> _configuration;
	NSString* _defaultCaptureSessionPreset;
	BOOL _isFullscreen;
	BOOL _canUseCamera;
	BOOL _videoRecordingTooltipEnabled;
	BOOL _showPerformanceMonitorView;
	BOOL _showXRayDetectorMonitorView;
	id<MNMontageCameraViewControllerDelegate> _delegate;
	MNMontageCaptureInteractionController* _captureInteractionController;
	long long _numberOfXRayResultToMonitor;

}

@property (assign,nonatomic) BOOL showPerformanceMonitorView;                                                      //@synthesize showPerformanceMonitorView=_showPerformanceMonitorView - In the implementation block
@property (assign,nonatomic) BOOL showXRayDetectorMonitorView;                                                     //@synthesize showXRayDetectorMonitorView=_showXRayDetectorMonitorView - In the implementation block
@property (assign,nonatomic) long long numberOfXRayResultToMonitor;                                                //@synthesize numberOfXRayResultToMonitor=_numberOfXRayResultToMonitor - In the implementation block
@property (nonatomic,readonly) id<MNMediaFiltersManaging> filtersManager; 
@property (assign,nonatomic,__weak) id<MNMontageCameraViewControllerDelegate> delegate;                            //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,readonly) MNMontageCameraState * cameraState; 
@property (nonatomic,retain) MNMontageCaptureInteractionController * captureInteractionController;                 //@synthesize captureInteractionController=_captureInteractionController - In the implementation block
@property (assign,nonatomic) BOOL isFullscreen;                                                                    //@synthesize isFullscreen=_isFullscreen - In the implementation block
@property (assign,nonatomic) BOOL canUseCamera;                                                                    //@synthesize canUseCamera=_canUseCamera - In the implementation block
@property (nonatomic,readonly) MNMontageCameraTooltipAutoHideHandler * tooltipAutoHideHandler; 
@property (assign,getter=isVideoRecordingTooltipEnabled,nonatomic) BOOL videoRecordingTooltipEnabled;              //@synthesize videoRecordingTooltipEnabled=_videoRecordingTooltipEnabled - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)captureManagerPreviewDidLoad;
-(void)captureManagerHasFinishedLoadingAudioSession;
-(void)captureManagerDidFailToLoadAudioSessionWithError:(id)arg1 ;
-(void)captureManagerHasFinishedLoadingCaptureSession;
-(void)captureManagerHasEndedCaptureSession;
-(void)captureManagerUpdatedPreviousCaptureDevice:(id)arg1 toCurrentCaptureDevice:(id)arg2 ;
-(void)captureManagerDidBecomeInterruptedWithReason:(unsigned char)arg1 ;
-(void)captureManagerDidResignInterrupted;
-(void)captureManagerDidEncounterRuntimeError:(id)arg1 willRetry:(BOOL)arg2 ;
-(id)_createNewTooltipController;
-(void)_playScanCompleteSoundEffect;
-(void)messengerCodeVideoProcessor:(id)arg1 didDetectAndDecodeWithDebugImages:(id)arg2 ;
-(void)messengerCodeVideoProcessor:(id)arg1 processFrameDidSucceedWithMetaData:(id)arg2 imagePickedFromLibrary:(BOOL)arg3 ;
-(void)messengerCodeVideoProcessor:(id)arg1 processFrameDidFailWithError:(id)arg2 debugImages:(id)arg3 ;
-(void)presentMessengerCodeScanError;
-(id)initWithSoundController:(id)arg1 captureCameraControllerLazyCreator:(id)arg2 captureSessionControllerLazyCreator:(id)arg3 capturePerformanceTrackerControllerLazyCreator:(id)arg4 filtersManagerLazyCreator:(id)arg5 cameraSettings:(id)arg6 userSession:(id)arg7 configuration:(id)arg8 cameraCycler:(id)arg9 webRTCHandler:(id)arg10 mediaFilterCaptureSessionPresetDecider:(id)arg11 messengerCodeManager:(id)arg12 streamCoordinator:(id)arg13 ;
-(void)webRTCHandlerDidBeginCall;
-(void)webRTCHandlerDidEndCall;
-(void)webRTCHandlerDidStartCameraCapture;
-(void)webRTCHandlerDidEndCameraCapture;
-(void)hideVideoRecordTooltip;
-(void)montageCameraViewDidDoubleTap:(id)arg1 ;
-(void)montageCameraViewDidPinch:(id)arg1 ;
-(void)montageCameraViewDidLongPress:(id)arg1 ;
-(void)setShowPerformanceMonitorView:(BOOL)arg1 ;
-(id)_createXRayDetector;
-(void)setShowXRayDetectorMonitorView:(BOOL)arg1 ;
-(void)setNumberOfXRayResultToMonitor:(long long)arg1 ;
-(BOOL)_isAuthorized;
-(void)_updatePerformanceMonitorView;
-(void)_updateXRayDetectorMonitorView;
-(void)_setupCaptureManagerIfNecessary;
-(void)_updateCameraActiveState;
-(void)_transformPreviewLayerForInterfaceOrientation;
-(void)_updateCameraStateOnMainThread;
-(void)_announceCameraState;
-(void)_stopSession;
-(void)_playSoundWithNameIfPossible:(long long)arg1 ;
-(void)_handleDoubleTapOnCameraView;
-(void)_switchCaptureDevice;
-(double)_maxZoomFactor;
-(BOOL)_checkAllowsCaptureAndLogIfFailed:(BOOL)arg1 ;
-(void)_captureImage;
-(void)_beginRecordingIfPossible;
-(void)_finishRecordingReachedMaxVideoCaptureLength:(BOOL)arg1 wasCancelled:(BOOL)arg2 ;
-(void)_endRecording;
-(void)_handleCapturedVideo:(id)arg1 thumbnail:(id)arg2 cameraPosition:(long long)arg3 ;
-(void)_didFailToCaptureVideo;
-(void)_photoDidCapture;
-(void)_completePhotoCapture:(id)arg1 ;
-(void)_completeVideoCapture:(id)arg1 ;
-(id)_analyticsExtrasWithCameraSizeInPixels:(CGSize)arg1 cameraPosition:(long long)arg2 ;
-(id)_currentCaptureMetadata;
-(void)_videoDidCapture;
-(void)_loadPreviewLayerCameraOptions;
-(BOOL)_isXRayEnabled;
-(void)_saveCurrentCaptureDevice;
-(void)_handleSingleTapOnCameraViewAtPoint:(CGPoint)arg1 viewSize:(CGSize)arg2 ;
-(void)_toggleFlashMode;
-(void)_toggleLowLightMode;
-(void)_cameraPermissionGrantedWithMicrophonePermission:(BOOL)arg1 ;
-(void)_cameraPermissionDenied;
-(id)_currentCaptureDeviceID;
-(void)_setCaptureDeviceWithIDOrFallbackToDefaultDevice:(id)arg1 ;
-(void)_restoreStickyCaptureDevice;
-(void)_showBlurViewIfPossible;
-(void)_handleCapturedImage:(id)arg1 metadata:(id)arg2 cameraPosition:(long long)arg3 orientation:(long long)arg4 error:(id)arg5 ;
-(void)_completeCapture;
-(void)_didUpdateXRayDetectionResults:(id)arg1 ;
-(void)_showVideoRecordTooltipIfPossible;
-(void)captureCoordinator:(id)arg1 didProduceGestureData:(id)arg2 fromCaptureView:(id)arg3 ;
-(BOOL)captureCoordinator:(id)arg1 shouldProduceGestureDataFromGestureRecognizer:(id)arg2 ;
-(BOOL)captureCoordinator:(id)arg1 shouldEnsureGestureRecognizer:(id)arg2 requiresFailureOfGestureRecognizer:(id)arg3 ;
-(BOOL)montageCaptureInteractionControllerShouldBeginCapture:(id)arg1 ;
-(BOOL)montageCaptureInteractionControllerShouldBeginRecording:(id)arg1 ;
-(void)montageCaptureInteractionControllerDidCaptureImage:(id)arg1 ;
-(void)montageCaptureInteractionControllerInitiatedRecording:(id)arg1 ;
-(void)montageCaptureInteractionControllerStartedRecording:(id)arg1 ;
-(void)montageCaptureInteractionControllerDidCancelRecording:(id)arg1 ;
-(void)montageCaptureInteractionControllerFinishedRecording:(id)arg1 reachedMaxVideoCaptureLength:(BOOL)arg2 ;
-(void)montageCaptureInteractionController:(id)arg1 didDragUpFromCameraButton:(double)arg2 ;
-(void)montageCaptureInteractionControllerDidChangeState:(id)arg1 ;
-(void)montagePermissisonsViewDidRequestPermissions:(id)arg1 ;
-(MNMontageCaptureInteractionController *)captureInteractionController;
-(BOOL)isVideoRecordingTooltipEnabled;
-(BOOL)showPerformanceMonitorView;
-(BOOL)showXRayDetectorMonitorView;
-(long long)numberOfXRayResultToMonitor;
-(MNMontageCameraTooltipAutoHideHandler *)tooltipAutoHideHandler;
-(void)setCaptureInteractionController:(MNMontageCaptureInteractionController *)arg1 ;
-(void)addCameraStateListener:(id)arg1 announceCurrentState:(BOOL)arg2 ;
-(void)showVideoRecordTooltipIfNeeded;
-(void)setVideoRecordingTooltipEnabled:(BOOL)arg1 ;
-(void)setCanUseCamera:(BOOL)arg1 ;
-(void)startDetectingMessengerCodes;
-(void)stopDetectingMessengerCodes;
-(void)updateCaptureSessionPresetWithFilterDescriptorIfNecessary:(id)arg1 ;
-(id<MNMediaFiltersManaging>)filtersManager;
-(void)montageComposerHudDidTapFlip;
-(void)montageComposerHudDidTapFlash;
-(void)montageComposerHudDidTapLowLightMode;
-(void)montageComposerHudView:(id)arg1 didChangeCameraConfigFrom:(id)arg2 to:(id)arg3 ;
-(void)_startSession;
-(void)setDelegate:(id<MNMontageCameraViewControllerDelegate>)arg1 ;
-(id<MNMontageCameraViewControllerDelegate>)delegate;
-(BOOL)prefersStatusBarHidden;
-(unsigned long long)supportedInterfaceOrientations;
-(void)reset;
-(BOOL)shouldAutorotate;
-(void)loadView;
-(void)viewWillAppear:(BOOL)arg1 ;
-(void)viewDidAppear:(BOOL)arg1 ;
-(void)viewWillDisappear:(BOOL)arg1 ;
-(void)viewDidDisappear:(BOOL)arg1 ;
-(void)_updateView;
-(void)viewWillTransitionToSize:(CGSize)arg1 withTransitionCoordinator:(id)arg2 ;
-(void)viewDidLoad;
-(BOOL)isFullscreen;
-(void)setIsFullscreen:(BOOL)arg1 ;
-(MNMontageCameraState *)cameraState;
-(void)_updateCameraState;
-(BOOL)canUseCamera;
-(void)_startRecording;
@end

