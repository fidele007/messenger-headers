/*
* This header is generated by classdump-dyld 1.0
* on Monday, May 8, 2017 at 12:27:54 AM Central European Summer Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/0B364788-EFE9-4CC1-B4D1-033CC2D7E2B9/Messenger.app/Messenger
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <FBSharedFramework/FBMessagingStoreDatabaseLifetimeEventListening.h>
#import <Messenger/FBMMessagesSnapshotFetchedSequenceIdListening.h>
#import <FBSharedFramework/FBViewerContextClassProvidable.h>
#import <Messenger/FBMMessagingStoreRestoreStateListening.h>
#import <Messenger/FBMSPQueueCreationListener.h>
#import <Messenger/MNMessagesSyncDeltaHandlerDataRefreshing.h>
#import <Messenger/MNMessagesSyncCoordinatorRefreshRetrierDelegate.h>

@protocol MNSyncProtocolConfigurationCreating, FBMessagingStoreDatabaseLifetimeEventListening, FBMMessagingStoreRestoreStateListening, FBMMessagesSnapshotFetchedSequenceIdListening, OS_dispatch_queue;
@class MNSPDataStore, MNSyncProtocolQueueRequester, MNSyncProtocolDeltaRequester, NSNotificationCenter, FBMMQTTManager, FBMSPErrorRetryManager, MNMessagesSyncCoordinatorRefreshRetrier, MNSyncProtocolCoordinatorListenerAnnouncer, FBAnalytics, MNMessagesSyncSnapshotPersistenceRunner, FBMMessagesSnapshotFetchedSequenceIdListeningAnnouncer, NSNumber, FBMessagingStoreDatabaseLifetimeEventListeningAnnouncer, FBMMessagingStoreRestoreStateListeningAnnouncer, NSObject, NSString;

@interface FBMSPCoordinator : NSObject <FBMessagingStoreDatabaseLifetimeEventListening, FBMMessagesSnapshotFetchedSequenceIdListening, FBViewerContextClassProvidable, FBMMessagingStoreRestoreStateListening, FBMSPQueueCreationListener, MNMessagesSyncDeltaHandlerDataRefreshing, MNMessagesSyncCoordinatorRefreshRetrierDelegate> {

	MNSPDataStore* _dataStore;
	MNSyncProtocolQueueRequester* _queueRequester;
	MNSyncProtocolDeltaRequester* _deltaRequester;
	NSNotificationCenter* _notificationCenter;
	FBMMQTTManager* _mqttManager;
	FBMSPErrorRetryManager* _retryManager;
	MNMessagesSyncCoordinatorRefreshRetrier* _coordinatorRefreshRetier;
	MNSyncProtocolCoordinatorListenerAnnouncer* _syncProtocolCoordinatorAnnouncer;
	FBAnalytics* _analyticsLogger;
	MNMessagesSyncSnapshotPersistenceRunner* _snapshotPersistenceRunner;
	id<MNSyncProtocolConfigurationCreating> _configCreator;
	FBMMessagesSnapshotFetchedSequenceIdListeningAnnouncer* _fetchedSequenceIdAnnouncer;
	BOOL _didSuccessfullySendQueueParams;
	long long _lastDeltaRequestSequenceId;
	unsigned long long _lastDeltaRequestTimeInMS;
	BOOL _isStarted;
	NSNumber* _sequenceIdWaitingForSyncToken;
	FBMessagingStoreDatabaseLifetimeEventListeningAnnouncer* _databaseLifetimeEventAnnouncer;
	id<FBMessagingStoreDatabaseLifetimeEventListening> _dispatchSelfDatabaseLifetimeEventListener;
	FBMMessagingStoreRestoreStateListeningAnnouncer* _restoreStateAnnouncer;
	id<FBMMessagingStoreRestoreStateListening> _dispatchSelfRestoreStateListener;
	id<FBMMessagesSnapshotFetchedSequenceIdListening> _dispatchSelfFetchedSequenceIdListener;
	NSObject*<OS_dispatch_queue> _syncProtocolProcessingQueue;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)messagingStoreDidCompleteRestore;
-(void)messagingStoreDidFailToRestoreWithError:(id)arg1 ;
-(void)didFetchSnapshotUpToSequenceId:(long long)arg1 ;
-(id)initWithDataStore:(id)arg1 queueRequester:(id)arg2 deltaRequester:(id)arg3 configCreator:(id)arg4 mqttManager:(id)arg5 retryManager:(id)arg6 notificationCenter:(id)arg7 analyticsLogger:(id)arg8 snapshotPersistenceRunner:(id)arg9 coordinatorRefreshRetier:(id)arg10 databaseLifetimeEventAnnouncer:(id)arg11 restoreStateAnnouncer:(id)arg12 syncProtocolCoordinatorAnnouncer:(id)arg13 fetchedSequenceIdAnnouncer:(id)arg14 spQueueProvider:(id)arg15 ;
-(void)_onMQTTSubscribeToPatternNotification:(id)arg1 ;
-(void)_startSnapshotIfNeededForReason:(long long)arg1 ;
-(long long)_sequenceIdForQueueRequestWithSequenceIdFromDataStore:(long long)arg1 ;
-(void)_requestSyncProtocolQueueWithSequenceId:(long long)arg1 ;
-(void)_fetchDeltaWithSyncToken:(id)arg1 sequenceId:(long long)arg2 forceRequest:(BOOL)arg3 ;
-(void)_refreshWithShouldForce:(BOOL)arg1 skipDeltaFetch:(BOOL)arg2 ;
-(void)_handleRefreshForReason:(long long)arg1 ;
-(void)_logCreateQueueRequestSucceeded;
-(void)_logCreateQueueRequestFailedWithError:(id)arg1 ;
-(BOOL)_shouldCoalesceDeltaRequest;
-(void)_continueDeltaFetchWithDeltaConfig:(id)arg1 ;
-(void)_logGetDiffsRequestSucceeded;
-(void)_logGetDiffsRequestFailedWithError:(id)arg1 ;
-(void)_logCoordinatorRefreshWithReason:(long long)arg1 ;
-(void)snapshotShouldBeFiredDueToForceFetchInboxDeltaReceived;
-(void)snapshotShouldBeFiredDueToQueueErrors;
-(void)snapshotShouldBeFiredDueToErrorProcessingDeltas;
-(void)syncProtocolConnectionShouldBeRefreshedDueToSequenceIdGap;
-(void)syncProtocolConnectionShouldBeRefreshedDueToTemporarilyUnavailableError;
-(void)messagesSyncCoordinatorShouldPerformRefreshNow;
-(void)syncProtocolDidCreateQueueWithSyncToken:(id)arg1 sequenceId:(long long)arg2 ;
-(id)initWithProviderMapData:(id)arg1 ;
-(void)didOpenDatabase;
-(void)didDiscardDatabaseFile;
-(void)didFailToOpenDatabaseWithError:(id)arg1 ;
-(void)didCreateDatabaseTables;
-(void)willDiscardDatabaseContents;
-(void)dealloc;
-(void)stop;
-(void)start;
@end

