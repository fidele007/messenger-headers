/*
* This header is generated by classdump-dyld 1.0
* on Monday, May 8, 2017 at 12:27:59 AM Central European Summer Time
* Operating System: Version 10.2 (Build 14C92)
* Image Source: /var/containers/Bundle/Application/0B364788-EFE9-4CC1-B4D1-033CC2D7E2B9/Messenger.app/Messenger
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <FBSharedFramework/MNThreadSummarySubscribing.h>
#import <FBSharedFramework/MNThreadSummaryOptimisticCacheUpdateListening.h>
#import <FBSharedFramework/MNSecureThreadSubscribing.h>
#import <FBSharedFramework/MNThreadMessageSubscribing.h>
#import <Messenger/MNPushMessageReceivedListening.h>
#import <FBSharedFramework/MNMessageSendSchedulerListening.h>
#import <Messenger/MNPendingThreadRequestListening.h>
#import <Messenger/MNMessagesSyncSnapshotListening.h>
#import <Messenger/FBMSPFolderCountDeltaHandlerListener.h>

@protocol MNSecureThreadServiceControlling;
@class MNThreadSummarySubscribingAnnouncer, MNThreadSummaryOptimisticCacheUpdateListeningAnnouncer, MNThreadMessageSubscribingAnnouncer, MNPushMessageReceivedListeningAnnouncer, MNMessageSendSchedulerListeningAnnouncer, MNPendingThreadRequestListeningAnnouncer, MNMessagesSyncSnapshotListeningAnnouncer, FBMSPFolderCountDeltaHandlerListenerAnnouncer, MNThreadListMonitorListenerAnnouncer, NSString;

@interface MNThreadListMonitor : NSObject <MNThreadSummarySubscribing, MNThreadSummaryOptimisticCacheUpdateListening, MNSecureThreadSubscribing, MNThreadMessageSubscribing, MNPushMessageReceivedListening, MNMessageSendSchedulerListening, MNPendingThreadRequestListening, MNMessagesSyncSnapshotListening, FBMSPFolderCountDeltaHandlerListener> {

	long long _threadListType;
	MNThreadSummarySubscribingAnnouncer* _threadSummarySubscribingAnnouncer;
	MNThreadSummaryOptimisticCacheUpdateListeningAnnouncer* _threadSummaryOptimisticUpdateAnnouncer;
	id<MNSecureThreadServiceControlling> _secureThreadService;
	MNThreadMessageSubscribingAnnouncer* _threadMessageSubscribingAnnouncer;
	MNPushMessageReceivedListeningAnnouncer* _pushMessageAnnouncer;
	MNMessageSendSchedulerListeningAnnouncer* _sendSchedulerAnnouncer;
	MNPendingThreadRequestListeningAnnouncer* _pendingThreadAnnouncer;
	MNMessagesSyncSnapshotListeningAnnouncer* _snapshotAnnouncer;
	FBMSPFolderCountDeltaHandlerListenerAnnouncer* _folderCountAnnouncer;
	MNThreadListMonitorListenerAnnouncer* _announcer;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)willCreateThreadForPendingThread:(id)arg1 ;
-(void)didCreateThreadWithKey:(id)arg1 forPendingThread:(id)arg2 ;
-(void)didFailToCreateThreadForPendingThread:(id)arg1 error:(id)arg2 ;
-(void)didCancelCreatingThreadForPendingThread:(id)arg1 ;
-(void)willRetryCreatingThreadForPendingThread:(id)arg1 ;
-(void)didScheduleSendingMessage:(id)arg1 toPendingThread:(id)arg2 ;
-(void)didCancelSendingMessage:(id)arg1 fromPendingThread:(id)arg2 ;
-(void)didReceiveAPNSMessage:(id)arg1 supportsPreview:(BOOL)arg2 userActionInfo:(id)arg3 preparedThreadSummary:(id)arg4 ;
-(void)didReceiveSyncMessage:(id)arg1 ;
-(id)initWithThreadListType:(long long)arg1 threadSummarySubscribingAnnouncer:(id)arg2 threadSummaryOptimisticUpdateAnnouncer:(id)arg3 secureThreadService:(id)arg4 threadMessageSubscribingAnnouncer:(id)arg5 pushMessageAnnouncer:(id)arg6 sendSchedulerAnnouncer:(id)arg7 pendingThreadAnnouncer:(id)arg8 snapshotAnnouncer:(id)arg9 folderCountAnnouncer:(id)arg10 ;
-(void)messagesSyncWillPerformCriticalSnapshot;
-(void)messagesSyncDidCompleteCriticalSnapshot;
-(void)messagesSyncDidFailCriticalSnapshotWithError:(id)arg1 ;
-(void)messagesSyncDidCompleteNonCriticalSnapshot;
-(void)didApplyUpdate:(id)arg1 toSecureThreadWithKey:(id)arg2 ;
-(void)didUpdateAllSecureThreads;
-(void)syncProtocolPendingRequestsFolderCountDeltaDidUpdate;
-(void)_configureMonitoring;
-(void)_setNeedsReloadForThreadKey:(id)arg1 ;
-(void)_setNeedsRemoveForThreadKey:(id)arg1 ;
-(void)_setNeedsReload;
-(void)_setNeedsReloadWithoutListTypeCheck;
-(void)_setInvalidationForOutgoingMessage:(id)arg1 ;
-(void)_setInvalidationForPendingThread:(id)arg1 ;
-(void)didApplyUpdates:(id)arg1 toThreadSummary:(id)arg2 ;
-(void)didDeleteThreadWithKey:(id)arg1 ;
-(void)didReplaceThreadSummary:(id)arg1 withThreadSummary:(id)arg2 forThreadKey:(id)arg3 ;
-(void)didPurgeSummary:(id)arg1 ;
-(void)didPurgeAllThreadSummaries;
-(void)didApplyUpdates:(id)arg1 toMessageSet:(id)arg2 forOriginalMessageSet:(id)arg3 threadKey:(id)arg4 ;
-(void)didReplaceMessageSet:(id)arg1 withMessageSet:(id)arg2 forThreadKey:(id)arg3 ;
-(void)didUpdateOptimisticStateForAllThreadKeys;
-(void)didUpdateOptimisticStateForThreadKey:(id)arg1 ;
-(void)didEnqueueMessageAndWillSendImmediately:(id)arg1 ;
-(void)didEnqueueMessageAndWillWaitInQueue:(id)arg1 ;
-(void)willSendQueuedMessage:(id)arg1 ;
-(void)didPutMessageBackInQueue:(id)arg1 ;
-(void)didPublishMessage:(id)arg1 ;
-(void)didSendMessage:(id)arg1 ;
-(void)didSendMessage:(id)arg1 andWillSendNextMessageInQueueImmediately:(id)arg2 ;
-(void)didCancelMessage:(id)arg1 ;
-(void)didCancelMessage:(id)arg1 andWillSendNextMessageInQueueImmediately:(id)arg2 ;
-(void)didFailMessage:(id)arg1 error:(id)arg2 errorType:(unsigned long long)arg3 ;
-(void)didRestoreAPNSMessagesFromDiskWithAffectedThreadKeys:(id)arg1 ;
-(void)addListener:(id)arg1 ;
-(void)removeListener:(id)arg1 ;
@end

