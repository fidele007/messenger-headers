/*
* This header is generated by classdump-dyld 1.0
* on Sunday, January 22, 2017 at 11:26:37 AM Central European Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/DB24BCEF-8CEA-41B1-9C55-8893795309EE/Messenger.app/Messenger
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Messenger/Messenger-Structs.h>
#import <libobjc.A.dylib/AVAsynchronousKeyValueLoading.h>
#import <Messenger/FNFAVAsset.h>
#import <Messenger/FNFAVPlayerItem.h>
#import <Messenger/FNFAssetForPlayer.h>
#import <Messenger/FNFInfoForLoopableAsset.h>
#import <Messenger/FNFDashDataLoaderDelegate.h>
#import <Messenger/FNFPlaylistLoaderDelegate.h>
#import <Messenger/FNFTimeLoadedDelegate.h>
#import <Messenger/FNFLiveAVPlayerAsset.h>

@protocol OS_dispatch_queue;
@class FNFBufferSizeDecider, FNFDashPlaylistData, FNFDashPlaylistLoader, FNFAssetResourceLoader, FNFDashRepresentationSpecificData, NSError, NSObject, NSDictionary, FNFAdaptiveBitrateSelector, NSString, NSArray, AVAudioMix;

@interface FNFDashAsset : NSObject <AVAsynchronousKeyValueLoading, FNFAVAsset, FNFAVPlayerItem, FNFAssetForPlayer, FNFInfoForLoopableAsset, FNFDashDataLoaderDelegate, FNFPlaylistLoaderDelegate, FNFTimeLoadedDelegate, FNFLiveAVPlayerAsset> {

	/*^block*/id _assetLoadedHandler;
	FNFBufferSizeDecider* _bufferSizeDecider;
	FNFDashPlaylistData* _playlistData;
	FNFDashPlaylistLoader* _playlistLoader;
	FNFAssetResourceLoader* _resourceLoader;
	FNFDashRepresentationSpecificData* _audioRepData;
	FNFDashRepresentationSpecificData* _videoRepData;
	/*^block*/id _playerCheckForStallCallback;
	BOOL _hasFailed;
	BOOL _isStalled;
	NSError* _loadingError;
	BOOL _shouldShowBroadcasterInterruptedMessage;
	BOOL _sentStreamDryNotification;
	BOOL _assetLoaded;
	BOOL _waitingOnLoad;
	int _warningCount;
	BOOL _async;
	NSObject*<OS_dispatch_queue> _dispatchQueue;
	double _loadingStartedTimestamp;
	FNFMp4FrameMetadataCompressor* _frames[2];
	vector<unsigned int, std::__1::allocator<unsigned int> >* _gopKeyframeIndices;
	BOOL _parsedHeaders[2];
	BOOL _allHeadersParsed;
	SCD_Struct_FB33 _duration;
	SCD_Struct_FB33 _videoTrackDuration;
	opaqueCMFormatDescriptionRef _formatDesc;
	AudioStreamBasicDescription _asbd;
	NSDictionary* _audioStreamExtraParameters;
	unsigned _timescale[2];
	unsigned long long _initialTime;
	unsigned long long _initialTimePts;
	BOOL _initialTimeSet;
	int _segmentsParsed[2];
	BOOL _playlistWasParsed;
	BOOL _shouldUsePtsForInitialTime;
	BOOL _shouldUpdateLoadedTimeEarlier;
	BOOL _enablePrefetchLookupWhenBypassCache;
	BOOL _hadInlineManifest;
	FNFAdaptiveBitrateSelector* _abrSelector;
	FNFDashAssetPrefetchMetadata _prefetchMetadata;

}

@property (assign,nonatomic) FNFDashAssetPrefetchMetadata prefetchMetadata;              //@synthesize prefetchMetadata=_prefetchMetadata - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) long long status; 
@property (nonatomic,copy,readonly) NSArray * loadedTimeRanges; 
@property (nonatomic,copy) AVAudioMix * audioMix; 
@property (nonatomic,readonly) SCD_Struct_FB33 maxBufferTime; 
@property (nonatomic,readonly) SCD_Struct_FB33 minBufferTime; 
-(double)loadingStartedTimestamp;
-(AudioStreamBasicDescription)asbd;
-(id)audioStreamExtraParameters;
-(void)addErrorToLog:(id)arg1 shouldStopPlayback:(BOOL)arg2 ;
-(BOOL)trackHasMoreFrames:(long long)arg1 ;
-(FNFFrameMetadata)currentFrameMetadataForTrack:(long long)arg1 ;
-(const char*)currentFrameDataForTrack:(long long)arg1 ;
-(void)advanceFrameForTrack:(long long)arg1 ;
-(void)updatePlaybackTime:(SCD_Struct_FB33)arg1 ;
-(BOOL)shouldPauseForStallingWithNextCheckCallback:(/*^block*/id)arg1 ;
-(BOOL)shouldRestartAfterStalling;
-(BOOL)shouldBufferVideoAsSoonAsPossible;
-(BOOL)seekToPosition:(SCD_Struct_FB33)arg1 ;
-(BOOL)resetAssetToBeginningIfNeeded;
-(void)playbackPauseRequested;
-(SCD_Struct_FB33)timeAfterSeek;
-(id)debugDetails;
-(BOOL)decompressedFramebuffer;
-(SCD_Struct_FB33)maxBufferTime;
-(SCD_Struct_FB33)minBufferTime;
-(id)representationId;
-(FNFDashAssetPrefetchMetadata)getUpdatedPrefetchMetadataIfPossible;
-(unsigned)availableQualitiesCount;
-(BOOL)isAbrEnabled;
-(FNFDashAssetPrefetchMetadata)prefetchMetadata;
-(void)setPrefetchMetadata:(FNFDashAssetPrefetchMetadata)arg1 ;
-(void)requestTimeLoadedUpdate;
-(double)nextLiveAudioTimestamp;
-(double)elapsedVideoTimestamp;
-(opaqueCMFormatDescriptionRef)formatDesc;
-(id)projection;
-(id)audioChannelConfiguration;
-(BOOL)containsTrack:(long long)arg1 ;
-(SCD_Struct_FB33)videoTrackDuration;
-(unsigned long long)timescale;
-(id)initWithConfig:(FNFDashAssetConfig)arg1 mpdData:(id)arg2 mpdUrl:(id)arg3 bandwidthProvider:(id)arg4 ;
-(id)_dataForRep:(id)arg1 track:(long long)arg2 ;
-(void)_potentiallyFetchFirstRequestForTrack:(long long)arg1 ;
-(void)_potentiallyStartRequest;
-(BOOL)_fullyDownloaded;
-(BOOL)shouldResetAssetToBeginning;
-(void)_seekDataLoaderToTime:(SCD_Struct_FB33)arg1 offset:(unsigned long long)arg2 shouldUpdateOffset:(BOOL)arg3 track:(long long)arg4 ;
-(BOOL)containsAudio;
-(BOOL)trackHasMoreFrames:(long long)arg1 isFullyDownloaded:(BOOL)arg2 ;
-(void)_sendDryNotificationIfApplicable;
-(void)_sendUndryNotificationIfApplicable;
-(void)createNewDataBlockDistributors;
-(id)dataBlockDistributorForTrack:(long long)arg1 ;
-(void)_handleWarning:(id)arg1 ;
-(void)setDashPlaylistData:(id)arg1 ;
-(void)parseAtomForTrack:(long long)arg1 ;
-(SCD_Struct_FB33)timeLoadedForOffset:(unsigned long long)arg1 track:(long long)arg2 ;
-(void)_updateTimeLoaded:(SCD_Struct_FB33)arg1 ;
-(void)_potentiallyStartRequestForTrack:(long long)arg1 ;
-(SCD_Struct_FB33)nextAbsoluteAudioTime;
-(id)_newRepDataForTrack:(long long)arg1 ;
-(void)createNewDataBlockDistributorForData:(id)arg1 track:(long long)arg2 ;
-(BOOL)_fullyDownloaded:(long long)arg1 ;
-(unsigned long long)offsetForTimeInSeconds:(float)arg1 track:(long long)arg2 ;
-(void)_attemptToParseInitializationAtomsForTrack:(long long)arg1 ;
-(void)_attemptToParseMoofAtomsForTrack:(long long)arg1 ;
-(FNFSeekStatus)_fragmentedSeekToPosition:(SCD_Struct_FB33)arg1 ;
-(FNFSeekStatus)_segmentedSeekToPosition:(SCD_Struct_FB33)arg1 ;
-(void)_resetDataForSeekBack;
-(BOOL)_advanceToNextGopKeyframe;
-(SCD_Struct_FB33)currentVideoPts;
-(FNFSeekStatus)_segmentedSeekStatusForTime:(SCD_Struct_FB33)arg1 shouldUpdateOffset:(BOOL)arg2 shouldSeekAudio:(BOOL)arg3 newOffset:(unsigned long long)arg4 ;
-(int)_videoSegmentIndexForTime:(SCD_Struct_FB33)arg1 ;
-(void)resetDataForSeekBack;
-(void)parsingDidFailWithError:(id)arg1 ;
-(void)_advanceAudioToMatchVideo;
-(void)dataWasReceivedForTrack:(long long)arg1 andIsComplete:(BOOL)arg2 ;
-(void)willChangeValue;
-(void)didChangeValue;
-(unsigned long long)requestedBytesCount;
-(int)unfetchedSegmentCountForTrack:(long long)arg1 ;
-(id)_dataLoaderForRepresentation:(id)arg1 track:(long long)arg2 ;
-(BOOL)offsetIsAtLeastLargestOffset:(unsigned long long)arg1 track:(long long)arg2 ;
-(unsigned long long)currentOffsetForTrack:(long long)arg1 ;
-(id)dataLoaderForTrack:(long long)arg1 ;
-(id)playlistLoader;
-(void)loadingDidFailWithError:(id)arg1 ;
-(void)playlistUpdated;
-(unsigned)unfetchedSegmentCapHitCount;
-(void)_forTestingMakeSynchronous;
-(void)dealloc;
-(NSString *)description;
-(SCD_Struct_FB33)duration;
-(id)asset;
-(long long)status;
-(void)cancelLoading;
-(AVAudioMix *)audioMix;
-(void)_handleError:(id)arg1 ;
-(void)addOutput:(id)arg1 ;
-(NSArray *)loadedTimeRanges;
-(FNFSeekStatus)seekToTime:(SCD_Struct_FB33)arg1 ;
-(id)playlistData;
-(CGAffineTransform)preferredTransform;
-(void)setAudioMix:(AVAudioMix *)arg1 ;
-(unsigned long long)receivedBytesCount;
-(id)resourceLoader;
-(id)accessLog;
-(SCD_Struct_FB33)currentTime;
-(id)tracksWithMediaType:(id)arg1 ;
-(long long)statusOfValueForKey:(id)arg1 error:(id*)arg2 ;
-(void)loadValuesAsynchronouslyForKeys:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(BOOL)isPlaybackLikelyToKeepUp;
-(BOOL)isPlaybackBufferFull;
-(void)playbackStarted;
-(id)dispatchQueue;
-(void)reportWarning:(id)arg1 ;
@end

