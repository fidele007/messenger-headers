/*
* This header is generated by classdump-dyld 1.0
* on Sunday, January 22, 2017 at 11:26:31 AM Central European Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /var/containers/Bundle/Application/DB24BCEF-8CEA-41B1-9C55-8893795309EE/Messenger.app/Messenger
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Messenger/FBMediaItemUploadFlowSessionDelegate.h>
#import <Messenger/FBMediaUploadFlowCoordinatorProtocol.h>

@protocol FBPersistentKeyValueStoreProtocol, FBKeyValueObjectStore, FBNetworkDispatch;
@class FBMediaUploadFlowCoordinatorListenerAnnouncer, FBMediaItemUploadFlowSchedulingLimiter, NSDictionary, FBMediaItemUploadFlowSession, NSMutableDictionary, NSString;

@interface FBMediaUploadFlowCoordinator : NSObject <FBMediaItemUploadFlowSessionDelegate, FBMediaUploadFlowCoordinatorProtocol> {

	id<FBPersistentKeyValueStoreProtocol> _pkvStore;
	id<FBKeyValueObjectStore> _kvObjectStore;
	id<FBNetworkDispatch> _networkDispatcher;
	FBMediaUploadFlowCoordinatorListenerAnnouncer* _announcer;
	FBMediaItemUploadFlowSchedulingLimiter* _limiter;
	NSDictionary* _allUploadFlowSessions;
	FBMediaItemUploadFlowSession* _lastScheduledFlowSession;
	NSMutableDictionary* _assetUploadCurrentRetryCount;
	float _progress;
	long long _status;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) long long status;                                                       //@synthesize status=_status - In the implementation block
@property (nonatomic,readonly) BOOL requiredReorderOperation; 
@property (nonatomic,readonly) FBMediaUploadFlowCoordinatorListenerAnnouncer * announcer; 
@property (nonatomic,readonly) float progress;                                                         //@synthesize progress=_progress - In the implementation block
-(FBMediaUploadFlowCoordinatorListenerAnnouncer *)announcer;
-(void)cancelAllUploadRequest;
-(void)resumeUploadWithPriorityStatus:(int)arg1 isRetry:(BOOL)arg2 ;
-(id)assetIDsToMediaInfo;
-(id)initWithPersistentKeyValueStore:(id)arg1 kvObjectStore:(id)arg2 networkDispatcher:(id)arg3 ;
-(void)addCopyrightListener:(id)arg1 ;
-(BOOL)requiredReorderOperation;
-(void)setMediaOrdering:(id)arg1 ;
-(void)startUploadFlowWithItems:(id)arg1 priorityStatus:(int)arg2 loggingInfo:(id)arg3 useFileStreaming:(BOOL)arg4 segmentationSizeMB:(unsigned long long)arg5 ;
-(void)pauseAllVideoUploadRequest;
-(id)assetIDsToUploadQuality;
-(id)mediaFBIDsToUploadSuccessTimes;
-(id)mediaFBIDsToUploadSessionIDs;
-(id)currentUploadMediaItemForDisplaying;
-(void)removeItemFromAlreadyUploadedMediaUploadItemsCache:(id)arg1 ;
-(void)removeCopyrightListener:(id)arg1 ;
-(void)_compareWithExistingSessionsAndCleanup:(id)arg1 ;
-(void)startUploadFlowForAsset:(id)arg1 waterfallID:(id)arg2 uploadConfig:(id)arg3 transcodeParams:(id)arg4 maxRetries:(unsigned long long)arg5 fallbackToRawUploadEnabled:(BOOL)arg6 priorityStatus:(int)arg7 loggingInfo:(id)arg8 useFileStreaming:(BOOL)arg9 segmentationSizeMB:(unsigned long long)arg10 ;
-(void)_updateExistingSessionIfNeededForAsset:(id)arg1 waterfallID:(id)arg2 uploadConfig:(id)arg3 ;
-(void)_removeExistingSessionIfNeededForAsset:(id)arg1 waterfallID:(id)arg2 uploadConfig:(id)arg3 transcodeParams:(id)arg4 ;
-(BOOL)_allSessionsAreFinished;
-(void)_didCompleteAllUploadFlowSessions;
-(void)_scheduleAdditionUploadSessionIfPossible;
-(void)mediaItemUploadFlowSessionRestart:(id)arg1 newSession:(id)arg2 ;
-(void)_cleanUpFailedOrCancelledSessionsForRetry;
-(id)_nextFlowSessionForUpload;
-(void)mediaItemUploadFlowSessionDidStart:(id)arg1 ;
-(void)mediaItemUploadFlowSessionDidFinish:(id)arg1 fbid:(id)arg2 ;
-(void)mediaItemUploadFlowSessionDidFinishProcessing:(id)arg1 ;
-(void)mediaItemUploadFlowSessionDidCancel:(id)arg1 processingFinished:(BOOL)arg2 ;
-(void)mediaItemUploadFlowSession:(id)arg1 didFailWithError:(id)arg2 processingFinished:(BOOL)arg3 ;
-(void)mediaItemUploadFlowSession:(id)arg1 didUpdateToProgress:(double)arg2 fromProgress:(double)arg3 ;
-(void)mediaItemUploadFlowSessionDidStartProcessing:(id)arg1 ;
-(void)publishAfterUploadForSessionWithWaterfallID:(id)arg1 ;
-(void)cancelUploadFlowForWaterfallID:(id)arg1 ;
-(float)progress;
-(long long)status;
-(void)removeListener:(id)arg1 ;
-(void)addListener:(id)arg1 ;
@end

